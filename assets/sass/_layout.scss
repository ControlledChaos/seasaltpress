/*--------------------------------------------------------------
# Sticky footer work
--------------------------------------------------------------*/
#page {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.site-content {
  flex: 1;
}


/*--------------------------------------------------------------
# Wrap
--------------------------------------------------------------*/
.wrap{
	max-width: $wrap;
	margin: auto;
	clear: both;
	@extend .clear;
}


/*--------------------------------------------------------------
# Flex Classes. Flex normally becomes block on mobile unless it has .stay-on-mobile
--------------------------------------------------------------*/
.flex{
	display: flex;
}

.flex-column{
	display: flex;
	flex-direction: column;
}

.align-center{
	align-items: center;
}

.justify-center{
	justify-content: center;
}

.flex-center{
	display: flex;
	justify-content: center;
	align-items: center;
}

.flex-grid{
	display: flex;
	flex-wrap: wrap;

	.col{
		margin-bottom: $baseline;
	}
}

.col{
	flex: 1;
	@extend .gutters;
}



.has-inner-cols{
	padding-right: 0;
	padding-left: 0;
}

@media (max-width: $mobile-width){
	.flex:not(.stay-on-mobile){
		display: block;
		.col{ margin-bottom: $baseline; }

	}
}

/*--------------------------------------------------------------
# Column Layout
--------------------------------------------------------------*/
//preset columns if needed. Else use .col for equal sized columns in a .flex container
.col-1-2 { width: 50%; }
.col-1-3 { width: 33.3333%; }
.col-2-3 { width: 66.6666%; }
.col-1-4 { width: 25%; }
.col-3-4 { width: 75%; }
.col-1-5 { width: 20%; }
.col-2-5 { width: 40%; }
.col-3-5 { width: 60%; }
.col-4-5 { width: 80%; }
.col-1-6 { width: 16.6666%; }
.col-5-6 { width: 83.3333%; }
.col-full{ width: 100%;  float: none; clear: both;}

.col-1-2,
.col-1-3,
.col-2-3,
.col-1-4,
.col-3-4,
.col-1-5,
.col-2-5,
.col-3-5,
.col-4-5,
.col-1-6,
.col-5-6,
.col-full{
  float: left;
  @extend .gutters;

	//if they dont have a parent of flex they need the floats cleared.
  *:not(.flex) > &{
  @extend .clear !optional;
  }

  //helpful but not necessary
  .row{
	  margin-left: -#{$gutters};
		margin-right: -#{$gutters};
		clear: both;
  }

	@media( max-width: $mobile-width){
		&:not(.stay-on-mobile){
			float: none;
			width: 100%;
		}
	}

}


.m1{
	margin-bottom: $baseline;
}

.gutters{
	padding-left: 15px;
	padding-right: 15px;
}

.no-gutters{
	padding-left: 0;
	padding-right: 0;
}

//when nesting columns or inside a guttered div, you probably will need this
.negative-gutters{
	margin-left: -#{$gutters};
	margin-right: -#{$gutters};
}

//holds articles in a max width
.content-column{
	@extend .gutters;
	max-width: $content-column;
	margin-left: auto;
	margin-right: auto;
}

//if its inside flex its not to be centered. but off to side.
.flex .content-column{
	margin-left: 0;
}

img{
	max-width: 100%;
	height: auto;
}


.posts-holder{
	max-width: $wrap;
	margin: 0 auto;
	padding-top: $baseline;
}


/*------- elements --------*/
.icon {
	display: inline-block;
	stroke-width: 0;
  stroke: currentColor;
	height: 1em;
	vertical-align: middle;
	width: 1em;
	position: relative;
}

svg{
	fill: currentColor;
}

/*------- Break out of centered content column --------*/

//based on http://modusagency.com/css-trick-expanding-a-div-beyond-a-parent-container/

//only works on centered columns
.break-out{
	width: 500%; //wont cause horizontal scrolling because #page has an overflow of hidden. 
	margin: auto;
	margin-left: -200%; //now 100vw is centered;
	margin-bottom: $baseline;
	padding: 15px 0 15px 0;

	.inside-break-out, >*{ //the very first child divs inside. Centered.
		margin: auto;
		width: 100vw;
		display: block;

	 }

	 .inside-break-out > p{
			@extend .gutters;
	 }
}







